{"id":"1dec6764-6fd9-4459-8b21-35e3af25b541","zed":"context","version":"0.4.0","text":"\n\n\n```ts space-flavor/graphql-service/src/server/resolvers/quick-actions-resolver.ts\nimport { HomeResolvers, QuickActions, SimpleTask } from '../../types/schema'\nimport { Context, withChildSpan } from '../context'\nimport { LoggerFlow } from '../../lib/logging'\nimport { asInternalTask } from '../tasks/task-utils'\n\nexport const quickActionsResolver: HomeResolvers['quickActions'] = async (_obj, _args, context) => {\n  if (!context.xoToggles.quickActions) {\n    return {} as QuickActions\n}\n  return getQuickActions(context)\n}\n\nexport const adminQuickActionsResolver: HomeResolvers['adminQuickActions'] = async (_ob, { input }, context) => {\n  if (!context.xoToggles.quickActions) {\n    return {} as QuickActions\n  }\n  return getAdminQuickActions(context, input.query)\n}\n\nexport const getQuickActions = async (\n  context: Context,\n): Promise<{ dropdownTasks: SimpleTask[]; visibleTasks: SimpleTask[] }> => {\n  context = withChildSpan(context, 'Fetching Quick Actions Data')\n  try {\n    const tasksResponse = await context.dataSources.oms.pex.getQuickActions(context)\n    if (tasksResponse.total === 0) {\n      context.logger.accumulate(LoggerFlow.OMS, `Received no quick actions from OMS`, 'info')\n    }\n\n    const tasks: SimpleTask[] = tasksResponse.data.map((task) =>\n      asInternalTask(context, {\n        taskID: task.taskId,\n        title: task.name,\n      }),\n    )\n\n    const numOfDropdownTasks = 5\n    return {\n      visibleTasks: tasks.slice(0, numOfDropdownTasks),\n      dropdownTasks: tasks.slice(numOfDropdownTasks),\n    }\n  } catch (e) {\n    context.logger.error(LoggerFlow.OMS, 'Error fetching quick actions', e)\n    return { dropdownTasks: [], visibleTasks: [] }\n  } finally {\n    context.span.finish()\n  }\n}\n\nexport const getAdminQuickActions = async (\n  context: Context, input?: string\n): Promise<{ dropdownTasks: SimpleTask[]; visibleTasks: SimpleTask[] }> => {\n  context = withChildSpan(context, 'Fetching Admin Quick Actions Data')\n  try {\n    const tasksResponse = await context.dataSources.oms.pex.getAdminQuickActions(context)\n    if (tasksResponse.total === 0) {\n      context.logger.accumulate(LoggerFlow.OMS, `Received no admin quick actions from OMS`, 'info')\n    }\n\n    const tasks: SimpleTask[] = tasksResponse.data.map((task) =>\n      asInternalTask(context, {\n        taskID: task.taskId,\n        title: task.name,\n      }),\n    )\n\n    const numOfDropdownTasks = 5\n    return {\n      visibleTasks: tasks.slice(0, numOfDropdownTasks),\n      dropdownTasks: tasks.slice(numOfDropdownTasks),\n    }\n  } catch (e) {\n    context.logger.error(LoggerFlow.OMS, 'Error fetching admin quick actions', e)\n    return { dropdownTasks: [], visibleTasks: [] }\n  } finally {\n    context.span.finish()\n  }\n}\n```\n\nwhy is input.query erroring\nIn the `adminQuickActionsResolver` function, you're destructuring `input` from the arguments and trying to access `input.query`, but looking at how you're using it in `getAdminQuickActions`, the parameter is defined as an optional string (`input?: string`), not an object with a query property.\n\nThere seems to be a mismatch between how the input is being passed and how it's being handled. To fix this, you need to either:\n\n1. Change how you're accessing the input in the resolver:\n```typescript\nexport const adminQuickActionsResolver: HomeResolvers['adminQuickActions'] = async (_ob, { input }, context) => {\n  if (!context.xoToggles.quickActions) {\n    return {} as QuickActions\n  }\n  return getAdminQuickActions(context, input) // Pass input directly, not input.query\n}\n```\n\nOR\n\n2. Update the `getAdminQuickActions` parameter type to match the input structure:\n```typescript\nexport const getAdminQuickActions = async (\n  context: Context, \n  input?: { query: string }\n): Promise<{ dropdownTasks: SimpleTask[]; visibleTasks: SimpleTask[] }>\n```\n\nThe error is occurring because there's an inconsistency between these two interfaces. You'll need to check your GraphQL schema to see how the input type is actually defined and make sure both the resolver and the implementation function match that definition.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":58}}},{"id":{"replica_id":0,"value":21},"start":2753,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":59}}},{"id":{"replica_id":0,"value":22},"start":4062,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":60}}}],"summary":"TypeScript Input Query Parameter Error","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":2724},"icon":"File","label":"space-flavor/graphql-service/src/server/resolvers/quick-actions-resolver.ts","metadata":{"path":"space-flavor/graphql-service/src/server/resolvers/quick-actions-resolver.ts"}}]}